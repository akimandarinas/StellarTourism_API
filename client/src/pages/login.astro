---
import Layout from '../layouts/Layout.astro';

//Datos para SEO
const title = 'Iniciar sesión | StellarTourism';
const description = 'Accede a tu cuenta de StellarTourism para gestionar tus reservas y explorar nuevos destinos espaciales.';

const { redirect } = Astro.url.searchParams;
---

<Layout title={title} description={description}>
 <section style="min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 2rem 0; background-color: #020617; position: relative; overflow: hidden;">
   
   <div style="position: absolute; inset: 0; background-image: url('/images/stars-bg.png'); background-size: cover; background-position: center; opacity: 0.6;"></div>
   
   <div style="position: absolute; inset: 0; background: radial-gradient(circle at center, rgba(2, 6, 23, 0.5), rgba(2, 6, 23, 0.95));"></div>
   
   <div style="max-width: 450px; width: 100%; padding: 0 1rem; position: relative; z-index: 10;">
     <div style="background-color: rgba(15, 23, 42, 0.7); backdrop-filter: blur(16px); border-radius: 1rem; border: 1px solid rgba(76, 201, 240, 0.2); box-shadow: 0 0 30px rgba(76, 201, 240, 0.15); overflow: hidden;">
       <div style="padding: 2rem;">
         <div style="text-align: center; margin-bottom: 2rem;">
           <h1 style="font-size: 2rem; font-weight: bold; margin-bottom: 0.5rem; color: white;">Iniciar sesión</h1>
           <p style="color: rgba(226, 232, 240, 0.7);">Accede a tu cuenta de StellarTourism</p>
         </div>
         
         <form id="login-form" style="display: flex; flex-direction: column; gap: 1.5rem;">
           
           <div>
             <label for="email" style="display: block; font-size: 0.875rem; font-weight: 500; color: rgba(226, 232, 240, 0.9); margin-bottom: 0.5rem;">Correo electrónico</label>
             <input 
               type="email" 
               id="email" 
               name="email" 
               required 
               style="width: 100%; background-color: rgba(2, 6, 23, 0.5); border: 1px solid rgba(76, 201, 240, 0.3); border-radius: 0.5rem; padding: 0.75rem 1rem; color: white; outline: none; transition: border-color 0.3s ease;"
               placeholder="tu.email@ejemplo.com"
             />
             <div id="email-error" style="color: #ef4444; font-size: 0.875rem; margin-top: 0.25rem; display: none;"></div>
           </div>
           
           <div>
             <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
               <label for="password" style="font-size: 0.875rem; font-weight: 500; color: rgba(226, 232, 240, 0.9);">Contraseña</label>
               <a href="/recuperar-contrasena" style="font-size: 0.875rem; color: #4cc9f0; text-decoration: none;">¿Olvidaste tu contraseña?</a>
             </div>
             <div style="position: relative;">
               <input 
                 type="password" 
                 id="password" 
                 name="password" 
                 required 
                 style="width: 100%; background-color: rgba(2, 6, 23, 0.5); border: 1px solid rgba(76, 201, 240, 0.3); border-radius: 0.5rem; padding: 0.75rem 1rem; color: white; outline: none; transition: border-color 0.3s ease;"
                 placeholder="Tu contraseña"
               />
               <button 
                 type="button" 
                 id="toggle-password" 
                 style="position: absolute; right: 0.75rem; top: 50%; transform: translateY(-50%); background: none; border: none; color: rgba(226, 232, 240, 0.7); cursor: pointer;"
                 aria-label="Mostrar contraseña"
               >
                 <svg xmlns="http://www.w3.org/2000/svg" style="height: 1.25rem; width: 1.25rem;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
               </button>
             </div>
             <div id="password-error" style="color: #ef4444; font-size: 0.875rem; margin-top: 0.25rem; display: none;"></div>
           </div>
           
           <div style="display: flex; align-items: center; gap: 0.5rem;">
             <input 
               type="checkbox" 
               id="remember" 
               name="remember" 
               style="accent-color: #4cc9f0;"
             />
             <label for="remember" style="font-size: 0.875rem; color: rgba(226, 232, 240, 0.9);">
               Recordar mi sesión
             </label>
           </div>
           
           <div id="form-error" style="color: #ef4444; font-size: 0.875rem; text-align: center; display: none; padding: 0.5rem; background-color: rgba(239, 68, 68, 0.1); border-radius: 0.5rem;"></div>
           
           <button 
             type="submit" 
             id="login-button"
             style="background: linear-gradient(to right, #4cc9f0, #8b5cf6); color: white; border: none; border-radius: 0.5rem; padding: 0.75rem 1.5rem; font-weight: 500; cursor: pointer; transition: all 0.3s ease; position: relative; overflow: hidden;"
           >
             <span id="button-text">Iniciar sesión</span>
             <span id="button-loader" style="position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; background: inherit; opacity: 0; transition: opacity 0.3s ease;">
               <svg style="height: 1.5rem; width: 1.5rem; animation: spin 1s linear infinite;" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                 <circle style="opacity: 0.25;" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                 <path style="opacity: 0.75;" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
               </svg>
             </span>
           </button>
         </form>
         
         <div style="text-align: center; margin-top: 1.5rem;">
           <p style="color: rgba(226, 232, 240, 0.7); margin-bottom: 1rem;">O inicia sesión con</p>
           
           <button 
             type="button" 
             id="google-login"
             style="width: 100%; display: flex; align-items: center; justify-content: center; gap: 0.5rem; background-color: white; color: #333; border: none; border-radius: 0.5rem; padding: 0.75rem 1.5rem; font-weight: 500; cursor: pointer; transition: all 0.3s ease;"
           >
             <svg xmlns="http://www.w3.org/2000/svg" style="height: 1.25rem; width: 1.25rem;" viewBox="0 0 24 24">
               <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
               <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
               <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
               <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
             </svg>
             Continuar con Google
           </button>
         </div>
         
         <div style="text-align: center; margin-top: 1.5rem;">
           <p style="color: rgba(226, 232, 240, 0.7);">
             ¿No tienes una cuenta? <a href="/register" style="color: #4cc9f0; text-decoration: underline;">Regístrate</a>
           </p>
         </div>
       </div>
     </div>
   </div>
 </section>
</Layout>

<script>
 const USE_LOCAL_AUTH = true;
 
 const loginForm = document.getElementById('login-form');
 const emailInput = document.getElementById('email');
 const passwordInput = document.getElementById('password');
 const rememberCheckbox = document.getElementById('remember');
 const loginButton = document.getElementById('login-button');
 const buttonText = document.getElementById('button-text');
 const buttonLoader = document.getElementById('button-loader');
 const formError = document.getElementById('form-error');
 const emailError = document.getElementById('email-error');
 const passwordError = document.getElementById('password-error');
 const togglePasswordButton = document.getElementById('toggle-password');
 const googleLoginButton = document.getElementById('google-login');
 
 //Función para mostrar/ocultar contraseña
 togglePasswordButton.addEventListener('click', () => {
   const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
   passwordInput.setAttribute('type', type);
   
   togglePasswordButton.innerHTML = type === 'password' 
     ? '<svg xmlns="http://www.w3.org/2000/svg" style="height: 1.25rem; width: 1.25rem;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>'
     : '<svg xmlns="http://www.w3.org/2000/svg" style="height: 1.25rem; width: 1.25rem;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>';
 });
 
 //Función para mostrar errores
 function showError(element, message) {
   element.textContent = message;
   element.style.display = 'block';
 }
 
 function hideError(element) {
   element.textContent = '';
   element.style.display = 'none';
 }
 
 function showLoader() {
   buttonText.style.opacity = '0';
   buttonLoader.style.opacity = '1';
   loginButton.disabled = true;
 }
 
 function hideLoader() {
   buttonText.style.opacity = '1';
   buttonLoader.style.opacity = '0';
   loginButton.disabled = false;
 }
 
 const localAuth = {
   users: JSON.parse(localStorage.getItem('stellar_users') || '[]'),
   
   //Iniciar sesión
   login: function(email, password) {
     return new Promise((resolve, reject) => {
       const user = this.users.find(user => user.email === email && user.password === password);
       
       if (!user) {
         return reject({ code: 'auth/user-not-found', message: 'Usuario no encontrado o contraseña incorrecta.' });
       }
       
       setTimeout(() => {
         resolve({ user: { ...user, password: undefined } });
       }, 800);
     });
   },
   
   loginWithGoogle: function() {
     return new Promise((resolve, reject) => {
       // Simular usuario de Google
       const googleUser = {
         uid: 'google_' + Date.now(),
         email: 'usuario.google@gmail.com',
         displayName: 'Usuario Google',
         photoURL: 'https://via.placeholder.com/150',
         createdAt: new Date().toISOString()
       };
       
       //Verificar si el usuario ya existe
       const existingUser = this.users.find(user => user.email === googleUser.email);
       
       if (!existingUser) {
         // Guardar nuevo usuario
         this.users.push(googleUser);
         localStorage.setItem('stellar_users', JSON.stringify(this.users));
       }
       
       setTimeout(() => {
         resolve({ user: existingUser || googleUser });
       }, 800);
     });
   }
 };
 
 loginForm.addEventListener('submit', async (e) => {
   e.preventDefault();
   
   hideError(formError);
   hideError(emailError);
   hideError(passwordError);
   
   const email = emailInput.value.trim();
   const password = passwordInput.value;
   const remember = rememberCheckbox.checked;
   
   if (!email) {
     showError(emailError, 'Por favor, introduce tu correo electrónico');
     emailInput.focus();
     return;
   }
   
   if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
     showError(emailError, 'Por favor, introduce un correo electrónico válido');
     emailInput.focus();
     return;
   }
   
   //Validar contraseña
   if (!password) {
     showError(passwordError, 'Por favor, introduce tu contraseña');
     passwordInput.focus();
     return;
   }
   
   showLoader();
   
   try {
     let userCredential;
     
     if (USE_LOCAL_AUTH) {
       userCredential = await localAuth.login(email, password);
     } else {al
     }
     
     setTimeout(() => {
       const redirectUrl = new URLSearchParams(window.location.search).get('redirect') || '/';
       
       localStorage.setItem('stellar_current_user', JSON.stringify(userCredential.user));
       localStorage.setItem('stellar_auth_token', 'simulated_token_' + Date.now());
       
       if (remember) {
         localStorage.setItem('stellar_remember_me', 'true');
       } else {
         localStorage.removeItem('stellar_remember_me');
       }
       
       // Mostrar mensaje de éxito antes de redirigir
       hideLoader();
       showError(formError, '¡Inicio de sesión exitoso! Redirigiendo...');
       formError.style.color = '#10b981';
       formError.style.backgroundColor = 'rgba(16, 185, 129, 0.1)';
       
       setTimeout(() => {
         window.location.href = redirectUrl;
       }, 1500);
     }, 1000);
     
   } catch (error) {
     hideLoader();
     
     let errorMessage = 'Error al iniciar sesión. Por favor, inténtalo de nuevo.';
     
     if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
       errorMessage = 'Correo electrónico o contraseña incorrectos.';
     } else if (error.code === 'auth/too-many-requests') {
       errorMessage = 'Demasiados intentos fallidos. Por favor, inténtalo más tarde.';
     } else if (error.code === 'auth/network-request-failed') {
       errorMessage = 'Error de conexión. Por favor, verifica tu conexión a internet.';
     }
     
     showError(formError, errorMessage);
     console.error('Error de inicio de sesión:', error);
   }
 });
 
 googleLoginButton.addEventListener('click', async () => {
   
   hideError(formError);
   
   showLoader();
   
   try {
     let result;
     
     if (USE_LOCAL_AUTH) {
       result = await localAuth.loginWithGoogle();
     } else {
     }
     
     setTimeout(() => {
       const redirectUrl = new URLSearchParams(window.location.search).get('redirect') || '/';
       
       // Guardar información de sesión
       localStorage.setItem('stellar_current_user', JSON.stringify(result.user));
       localStorage.setItem('stellar_auth_token', 'simulated_token_' + Date.now());
       
       if (rememberCheckbox.checked) {
         localStorage.setItem('stellar_remember_me', 'true');
       }
       
       hideLoader();
       showError(formError, '¡Inicio de sesión exitoso! Redirigiendo...');
       formError.style.color = '#10b981';
       formError.style.backgroundColor = 'rgba(16, 185, 129, 0.1)';
       
       setTimeout(() => {
         window.location.href = redirectUrl;
       }, 1500);
     }, 1000);
     
   } catch (error) {
     hideLoader();
     
     let errorMessage = 'Error al iniciar sesión con Google. Por favor, inténtalo de nuevo.';
     
     if (error.code === 'auth/popup-closed-by-user') {
       errorMessage = 'Has cerrado la ventana de inicio de sesión. Por favor, inténtalo de nuevo.';
     } else if (error.code === 'auth/account-exists-with-different-credential') {
       errorMessage = 'Ya existe una cuenta con este correo electrónico pero con otro método de inicio de sesión.';
     } else if (error.code === 'auth/network-request-failed') {
       errorMessage = 'Error de conexión. Por favor, verifica tu conexión a internet.';
     }
     
     showError(formError, errorMessage);
     console.error('Error de inicio de sesión con Google:', error);
   }
 });
 
 const inputs = [emailInput, passwordInput];
 inputs.forEach(input => {
   input.addEventListener('focus', () => {
     input.style.borderColor = '#4cc9f0';
   });
   
   input.addEventListener('blur', () => {
     input.style.borderColor = 'rgba(76, 201, 240, 0.3)';
   });
 });
 
 const urlParams = new URLSearchParams(window.location.search);
 const errorParam = urlParams.get('error');
 
 // Mostrar error si viene en la URL
 if (errorParam) {
   let errorMessage = 'Ha ocurrido un error. Por favor, inténtalo de nuevo.';
   
   if (errorParam === 'invalid_credentials') {
     errorMessage = 'Correo electrónico o contraseña incorrectos.';
   } else if (errorParam === 'account_disabled') {
     errorMessage = 'Tu cuenta ha sido deshabilitada. Por favor, contacta con soporte.';
   } else if (errorParam === 'session_expired') {
     errorMessage = 'Tu sesión ha expirado. Por favor, inicia sesión de nuevo.';
   }
   
   showError(formError, errorMessage);
 }
 
 const rememberedUser = localStorage.getItem('stellar_remember_me');
 if (rememberedUser) {
   const user = JSON.parse(localStorage.getItem('stellar_current_user') || '{}');
   if (user.email) {
     emailInput.value = user.email;
     rememberCheckbox.checked = true;
   }
 }
</script>

<style>
 @keyframes spin {
   from {
     transform: rotate(0deg);
   }
   to {
     transform: rotate(360deg);
   }
 }
 
 /* Estilos para el hover de los botones */
 #login-button:hover {
   box-shadow: 0 4px 12px rgba(76, 201, 240, 0.3);
   transform: translateY(-2px);
 }
 
 #google-login:hover {
   background-color: #f8f9fa;
   box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
   transform: translateY(-2px);
 }
 
 /* Animación para las estrellas */
 @keyframes twinkle {
   0%, 100% { opacity: 0.5; }
   50% { opacity: 1; }
 }
</style>
